modFit <- train(Species ~.,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform = TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
library(rattle)
install.packages("rattle")
library(rattle)
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
pnorm(45,mean = 30, sd = 5, lower.tail = FALSE)
pnorm(25,mean = 30, sd = 5, lower.tail = TRUE)
qnorm(0.05,mean = 35, sd = 9, lower.tail = TRUE)
qnorm(0.998,mean = 2.5, sd = 0.25, lower.tail = FALSE)
qnorm(0.998,mean = 2.5, sd = 0.25, lower.tail = TRUE)
pexp(1/3, rate = 1/5.3, lower.tail = TRUE)
dexp(1/3, rate = 1/5.3, lower.tail = TRUE)
dexp(1/3, rate = 1/5.3)
dexp(3, rate = 1/5.3)
pexp(3, rate = 5.3)
pexp(1/3, rate = 5.3)
pexp(3, rate = 1/5.3)
pexp(1, rate = 0.006)
qexp(1, rate = 0.006)
dexp(1, rate = 0.006)
pexp(1, rate = 0.006)
qexp(0.005982036, rate = 0.006)
200000/0.006
pexp(150, rate = 0.006)
pexp(30, rate = 0.03)
pexp(30, rate = 0.03,lower.tail = FALSE)
pexp(300, rate = 0.03,lower.tail = FALSE)
pnorm(0.3,mean = 0.4, sd = 0.0658, lower.tail = TRUE)
x <- seq(-4, 4, length=100)
hx <- dchisq(x)
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(5, 10, 15)
colors <- c("red", "blue", "darkgreen")
labels <- c("df=5", "df=10", "df=15")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of chi Distributions")
for (i in 1:3){
lines(x, dt(x,degf[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1), col=colors)
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1,2), col=colors)
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(5, 10, 15)
colors <- c("red", "blue", "darkgreen")
labels <- c("df=5", "df=10", "df=15")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of chi Distributions")
for (i in 1:3){
lines(x, dt(x,degf[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1,2), col=colors)
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(5, 10, 15)
colors <- c("red", "blue", "darkgreen")
labels <- c("df=5", "df=10", "df=15")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of chi Distributions")
for (i in 1:3){
lines(x, dchisq(x,degf[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1), col=colors)
x <- seq(0, 30, length=100)
hx <- dnorm(x)
degf <- c(5, 10, 15)
colors <- c("red", "blue", "darkgreen")
labels <- c("df=5", "df=10", "df=15")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of chi Distributions")
for (i in 1:3){
lines(x, dchisq(x,degf[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1), col=colors)
pnorm(2000,mean = 3000, sd = 500, lower.tail = TRUE)
pnorm(3000,mean = 3000, sd = 500, lower.tail = TRUE)
pnorm(0) - pnorm(-1)
pnorm(0,mean = 945.04,sd = 142.61) - pnorm(-1,mean = 945.04,sd = 142.61)
pnorm(0,mean = 945.04,sd = 142.61) - pnorm(-142.61,mean = 945.04,sd = 142.61)
pnorm(945.04,mean = 945.04,sd = 142.61) - pnorm(-142.61,mean = 945.04,sd = 142.61)
pnorm(945.04,mean = 945.04,sd = 142.61) - pnorm(945.04-142.61,mean = 945.04,sd = 142.61)
pnorm(0) - pnorm(-1)
pnorm(945.04,mean = 945.04,sd = 142.61) - pnorm(945.04-142.61,mean = 945.04,sd = 142.61)
a <- 5
num_per_day <- c(7,6,6,10,6,6,7,4,7,4,5,7,9,6,5,5,9,7,5,9,5,5,4,8,5,8,
5,6,4,6,4,7,6,5,8,4,5,5,6,5,8,5,6,6,5,7,7,6,7,8)
machine <- as.data.frame(num_per_day)
num_per_day <- c(7,6,6,10,6,6,7,4,7,4,5,7,9,6,5,5,9,7,5,9,5,5,4,8,5,8,
5,6,4,6,4,7,6,5,8,4,5,5,6,5,8,5,6,6,5,7,7,6,7,8)
machine <- as.data.frame(num_per_day)
num_per_day <- c(7,6,6,10,6,6,7,4,7,4,5,7,9,6,5,5,9,7,5,9,5,5,4,8,5,8,
5,6,4,6,4,7,6,5,8,4,5,5,6,5,8,5,6,6,5,7,7,6,7,8)
machine <- as.data.frame(num_per_day)
table(machine)
library("recommenderlab", lib.loc="~/R/win-library/3.3")
if(!"recommenderlab" %in% rownames(installed.packages()))
{
install.packages("recommenderlab")
}
if (!"ggplot2" %in% rownames(installed.packages()))
{
install.packages("ggplot2")
}
library(knitr)
library(ggplot2)
library(recommenderlab)
opts_chunk$set(echo = TRUE, warning = FALSE,message=FALSE)
set.seed(1)
data_package <- data(package = "recommenderlab")
data_package$results[, "Item"]
head(data_package)
data(MovieLense)
MovieLense
class(MovieLense)
class(MovieLense)
class(MovieLenseMeta)
class(MovieLense)
methods(class = class(MovieLense))
object.size(as(MovieLense, "matrix"))
similarity_users <- similarity(MovieLense[1:4, ], method = "cosine", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity")
similarity_items <- similarity(MovieLense[, 1:4], method ="cosine", which = "items")
as.matrix(similarity_items)
image(as.matrix(similarity_items), main = "Item similarity")
recommender_models <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
lapply(recommender_models, "[[", "description")
head(MovieLense@data)
head(MovieLense)
View(MovieLenseMeta)
View(MovieLenseMeta)
views_per_movie <- colCounts(MovieLense)
table_views <-
data.frame(movie = names(views_per_movie), views = views_per_movie)
table_views <-
table_views[order(table_views$views, decreasing = TRUE),]
ggplot(table_views[1:6,], aes(x = movie, y = views)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ggtitle("Number of views
of the top movies")
dim(MovieLense)
slotNames(MovieLense)
class(MovieLense@data)
dim(MovieLense@data)
ratings_movies <- MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
ratings_movies
ratings_movies_norm <- normalize(ratings_movies)
sum(rowMeans(ratings_movies_norm) > 0.00001)
which_set <- sample(x = 1:5,
size = nrow(ratings_movies),
replace =
TRUE)
for (i_model in 1:5) {
which_train <- which_set == i_model
recc_data_train <- ratings_movies[which_train,]
recc_data_test <- ratings_movies[!which_train,]
## build the recommender
}
dim(recc_data_test)
dim(recc_data_train)
which_train <- sample(x = c(TRUE, FALSE), size = nrow(ratings_movies),
replace = TRUE, prob = c(0.8, 0.2))
head(which_train)
recc_data_train <- ratings_movies[which_train, ]
recc_data_test <- ratings_movies[!which_train, ]
dim(recc_data_test)
dim(recc_data_train)
which_set <- sample(x = 1:5,
size = nrow(ratings_movies),
replace =
TRUE)
for (i_model in 1:5) {
which_train <- which_set == i_model
recc_data_train <- ratings_movies[which_train,]
recc_data_test <- ratings_movies[!which_train,]
## build the recommender
}
dim(recc_data_train)
dim(recc_data_test)
model_details <- getModel(recc_model)
recc_model <- Recommender(data = recc_data_train, method = "IBCF",
parameter = list(k = 30))
model_details <- getModel(recc_model)
n_items_top <- 20
image(model_details$sim[1:n_items_top, 1:n_items_top],
main = "Heatmap of the first rows and columns")
col_sums <- colSums(model_details$sim > 0)
qplot(col_sums) + stat_bin(binwidth = 1) + ggtitle("Distribution of
the column count")
which_max <- order(col_sums, decreasing = TRUE)[1:6]
rownames(model_details$sim)[which_max]
n_recommended <- 6
recc_predicted <- predict(object = recc_model, newdata = recc_data_test, n = n_recommended)
recc_predicted@items[[1]]
recc_user_1 <- recc_predicted@items[[1]]
movies_user_1 <- recc_predicted@itemLabels[recc_user_1]
movies_user_1
recc_matrix <- sapply(recc_predicted@items, function(x) {
colnames(ratings_movies)[x]
})
recc_matrix[, 1:4]
number_of_items <- factor(table(recc_matrix))
chart_title <- "Distribution of the number of items for IBCF"
qplot(number_of_items) + ggtitle(chart_title)
number_of_items_sorted <- sort(number_of_items, decreasing = TRUE)
number_of_items_top <- head(number_of_items_sorted, n = 4)
table_top <- data.frame(names(number_of_items_top),
number_of_items_top)
table_top
recc_model <- Recommender(data = recc_data_train, method = "UBCF")
n_recommended <- 6
recc_predicted <- predict(object = recc_model,
newdata = recc_data_test, n = n_recommended)
n_recommended <- 6
recc_predicted <- predict(object = recc_model,
newdata = recc_data_test, n = n_recommended)
recc_matrix <- sapply(recc_predicted@items, function(x) {
colnames(ratings_movies)[x]
})
recc_matrix[, 1:4]
number_of_items <- factor(table(recc_matrix))
chart_title <- "Distribution of the number of items for UBCF"
qplot(number_of_items) + ggtitle(chart_title)
number_of_items_sorted <- sort(number_of_items, decreasing = TRUE)
number_of_items_top <- head(number_of_items_sorted, n = 4)
table_top <- data.frame(names(number_of_items_top), number_of_items_top)
table_top
which_train <- sample(x = c(TRUE, FALSE), size = nrow(ratings_movies),
replace = TRUE, prob = c(0.8, 0.2))
head(which_train)
recc_data_train <- ratings_movies[which_train, ]
recc_data_test <- ratings_movies[!which_train, ]
recc_model <- Recommender(data = recc_data_train, method = "IBCF",
parameter = list(k = 30))
model_details <- getModel(recc_model)
n_items_top <- 20
image(model_details$sim[1:n_items_top, 1:n_items_top],
main = "Heatmap of the first rows and columns")
col_sums <- colSums(model_details$sim > 0)
qplot(col_sums) + stat_bin(binwidth = 1) + ggtitle("Distribution of
the column count")
which_max <- order(col_sums, decreasing = TRUE)[1:6]
rownames(model_details$sim)[which_max]
n_recommended <- 6
recc_predicted <- predict(object = recc_model, newdata = recc_data_test, n = n_recommended)
recc_predicted@items[[1]]
recc_predicted@items[[1]]
recc_user_1 <- recc_predicted@items[[1]]
movies_user_1 <- recc_predicted@itemLabels[recc_user_1]
movies_user_1
recc_matrix <- sapply(recc_predicted@items, function(x) {
colnames(ratings_movies)[x]
})
recc_matrix[, 1:4]
number_of_items <- factor(table(recc_matrix))
chart_title <- "Distribution of the number of items for IBCF"
qplot(number_of_items) + ggtitle(chart_title)
number_of_items_sorted <- sort(number_of_items, decreasing = TRUE)
number_of_items_top <- head(number_of_items_sorted, n = 4)
table_top <- data.frame(names(number_of_items_top),
number_of_items_top)
table_top
recc_model <- Recommender(data = recc_data_train, method = "UBCF")
if(!"recommenderlab" %in% rownames(installed.packages()))
{
install.packages("recommenderlab")
}
if (!"ggplot2" %in% rownames(installed.packages()))
{
install.packages("ggplot2")
}
library(knitr)
library(ggplot2)
library(recommenderlab)
opts_chunk$set(echo = TRUE, warning = FALSE,message=FALSE)
set.seed(1)
data_package <- data(package = "recommenderlab")
data_package$results[, "Item"]
data(MovieLense)
MovieLense
class(MovieLense)
methods(class = class(MovieLense))
methods(class = class(MovieLense))
object.size(as(MovieLense, "matrix"))
similarity_users <- similarity(MovieLense[1:4, ], method = "cosine", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity")
similarity_items <- similarity(MovieLense[, 1:4], method ="cosine", which = "items")
as.matrix(similarity_items)
image(as.matrix(similarity_items), main = "Item similarity")
recommender_models <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
lapply(recommender_models, "[[", "description")
dim(MovieLense)
slotNames(MovieLense)
class(MovieLense@data)
dim(MovieLense@data)
vector_ratings <- as.vector(MovieLense@data)
unique(vector_ratings)
table_ratings <- table(vector_ratings)
table_ratings
vector_ratings <- vector_ratings[vector_ratings != 0]
qplot(vector_ratings) + ggtitle("Distribution of the ratings")
views_per_movie <- colCounts(MovieLense)
table_views <-
data.frame(movie = names(views_per_movie), views = views_per_movie)
table_views <-
table_views[order(table_views$views, decreasing = TRUE),]
ggplot(table_views[1:6,], aes(x = movie, y = views)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + ggtitle("Number of views
of the top movies")
average_ratings <- colMeans(MovieLense)
qplot(average_ratings) + stat_bin(binwidth = 0.1) + ggtitle("Distribution of the average movie rating")
average_ratings_relevant <- average_ratings[views_per_movie > 100]
qplot(average_ratings_relevant) + stat_bin(binwidth = 0.1) +
ggtitle(paste("Distribution of the relevant average ratings"))
image(MovieLense, main = "Heatmap of the rating matrix")
image(MovieLense[1:10, 1:15], main = "Heatmap of the first rows and
columns")
min_n_movies <- quantile(rowCounts(MovieLense), 0.99)
min_n_users <- quantile(colCounts(MovieLense), 0.99)
min_n_movies
min_n_users
image(MovieLense[rowCounts(MovieLense) > min_n_movies,
colCounts(MovieLense) > min_n_users], main = "Heatmap of the top users
and movies")
ratings_movies <- MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
ratings_movies
min_movies <- quantile(rowCounts(ratings_movies), 0.98)
min_users <- quantile(colCounts(ratings_movies), 0.98)
average_ratings_per_user <- rowMeans(ratings_movies)
qplot(average_ratings_per_user) + stat_bin(binwidth = 0.1) +
ggtitle("Distribution of the average rating per user")
ratings_movies_norm <- normalize(ratings_movies)
sum(rowMeans(ratings_movies_norm) > 0.00001)
image(ratings_movies_norm[rowCounts(ratings_movies_norm) > min_movies,
colCounts(ratings_movies_norm) > min_users], main = "Heatmap of the
top users and movies")
ratings_movies_watched <- binarize(ratings_movies, minRating = 1)
min_movies_binary <- quantile(rowCounts(ratings_movies), 0.95)
min_users_binary <- quantile(colCounts(ratings_movies), 0.95)
image(ratings_movies_watched[rowCounts(ratings_movies) > min_movies_binary,colCounts(ratings_movies) > min_users_binary], main = "Heatmap
of the top users and movies")
ratings_movies_good <- binarize(ratings_movies, minRating = 3)
image(ratings_movies_good[rowCounts(ratings_movies) > min_movies_binary, colCounts(ratings_movies) > min_users_binary], main = "Heatmap of the top users and movies")
which_train <- sample(x = c(TRUE, FALSE), size = nrow(ratings_movies),
replace = TRUE, prob = c(0.8, 0.2))
head(which_train)
recc_data_train <- ratings_movies[which_train, ]
recc_data_test <- ratings_movies[!which_train, ]
recc_model <- Recommender(data = recc_data_train, method = "IBCF",
parameter = list(k = 30))
model_details <- getModel(recc_model)
n_items_top <- 20
image(model_details$sim[1:n_items_top, 1:n_items_top],
main = "Heatmap of the first rows and columns")
col_sums <- colSums(model_details$sim > 0)
qplot(col_sums) + stat_bin(binwidth = 1) + ggtitle("Distribution of
the column count")
which_max <- order(col_sums, decreasing = TRUE)[1:6]
rownames(model_details$sim)[which_max]
n_recommended <- 6
recc_predicted <- predict(object = recc_model, newdata = recc_data_test, n = n_recommended)
recc_predicted@items[[1]]
recc_user_1 <- recc_predicted@items[[1]]
movies_user_1 <- recc_predicted@itemLabels[recc_user_1]
movies_user_1
recc_matrix <- sapply(recc_predicted@items, function(x) {
colnames(ratings_movies)[x]
})
recc_matrix[, 1:4]
number_of_items <- factor(table(recc_matrix))
chart_title <- "Distribution of the number of items for IBCF"
qplot(number_of_items) + ggtitle(chart_title)
number_of_items_sorted <- sort(number_of_items, decreasing = TRUE)
number_of_items_top <- head(number_of_items_sorted, n = 4)
table_top <- data.frame(names(number_of_items_top),
number_of_items_top)
table_top
recc_model <- Recommender(data = recc_data_train, method = "UBCF")
n_recommended <- 6
recc_predicted <- predict(object = recc_model,
newdata = recc_data_test, n = n_recommended)
recc_matrix <- sapply(recc_predicted@items, function(x) {
colnames(ratings_movies)[x]
})
recc_matrix[, 1:4]
number_of_items <- factor(table(recc_matrix))
chart_title <- "Distribution of the number of items for UBCF"
qplot(number_of_items) + ggtitle(chart_title)
number_of_items_sorted <- sort(number_of_items, decreasing = TRUE)
number_of_items_top <- head(number_of_items_sorted, n = 4)
table_top <- data.frame(names(number_of_items_top), number_of_items_top)
table_top
recc_data_test
head(recc_data_test@data)
recc_data_test@data@Dimnames
recc_data_test@data@factors
data(Duncan)
library(car)
library(MASS)
data(Duncan)
class(Duncan)
m <- matrix(sample(c(0,1), 50, replace=TRUE), nrow=5, ncol=10,
dimnames=list(users=paste("u", 1:5, sep=''),
items=paste("i", 1:10, sep='')))
m
b <- as(m, "binaryRatingMatrix")
m <- as.data.frame(m)
m
b <- as(m, "binaryRatingMatrix")
recc_matrix[, 1:4]
recc_matrix <- sapply(recc_predicted@items, function(x) {
colnames(ratings_movies)[x]
})
View(recc_matrix)
View(recc_matrix)
number_of_items <- factor(table(recc_matrix))
chart_title <- "Distribution of the number of items for IBCF"
qplot(number_of_items) + ggtitle(chart_title)
class(recc_predicted)
class(MovieLense)
class(MovieLenseMeta)
library(eurostat)
library(dplyr)
#Initialize the variables
gross_debt <- get_eurostat("teina225", time_format = "num")
gross_debt_year <- gross_debt %>%
filter(time == 2015 & unit == "PC_GDP")
# merge the filter data with wgeospatial data
gross_debt_geo <- merge_eurostat_geodata(gross_debt_year, geocolumn="geo", resolution=60,
output_class="spdf", all_regions=FALSE)
gross_debt <- get_eurostat("teina225", time_format = "num")
library(eurostat)
library(dplyr)
gross_debt <- get_eurostat("teina225", time_format = "num")
gross_debt_year <- gross_debt %>%
filter(time == 2015 & unit == "PC_GDP")
gross_debt_geo <- merge_eurostat_geodata(gross_debt_year, geocolumn="geo", resolution=60,
output_class="spdf", all_regions=FALSE)
install.packages("eurostat")
library(eurostat)
gross_debt <- get_eurostat("teina225", time_format = "num")
gross_debt_year <- gross_debt %>%
filter(time == 2015 & unit == "PC_GDP")
gross_debt_geo <- merge_eurostat_geodata(gross_debt_year, geocolumn="geo", resolution=60,
output_class="spdf", all_regions=FALSE)
shiny::runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
runApp('Data_Science/R/Tasks/LeafletMap_Shiny/LeafletMap')
install.packages("leaflet")
shiny::runApp()
qplot(Sepal.Width, Sepal.Length, data = iris)
library(ggplot2)
qplot(Sepal.Width, Sepal.Length, data = iris)
runApp()
runApp()
runApp()
runApp()
library(leaflet)
map <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(10,55,zoom = 3)
map
map <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(10,55,zoom = 3)
library(leaflet)
map <-   leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(10,55,zoom = 3)
map <- leaflet()
map <- leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(10,55,zoom = 3)
map
runApp()
runApp()
runApp()
